<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">Ci8vID09PT09PT09IERlbGV0ZSBQZXJtaXNzaW9uIEphdmEgU2VydmljZSAoVVRJTFMpID09PT09
PT09PT0gLy8KCnByaXZhdGUgc3RhdGljIEJvb2xlYW4gY2hlY2tJZlJlYWRUb0JlRGVsZXRlZChT
dHJpbmcgbW9kdWxlSWQsIFN0cmluZyByZWFkRmVhdHVyZUlkLCBTdHJpbmcgY3VycmVudFBlcm1p
c3Npb25JZCwgU3RyaW5nIHJvbGVJZCwgSURhdGFbXSBpbnB1dExpc3QpIHsKCUJvb2xlYW4gaXNE
ZWxldGUgPSB0cnVlOwoJZm9yKElEYXRhIGVsOiBpbnB1dExpc3QpIHsKCQlIYXNoTWFwPFN0cmlu
ZywgU3RyaW5nPiBpbnB1dFZhbHVlcyA9IGdldElucHV0VmFsdWVzKGVsKTsKCQlpZihpbnB1dFZh
bHVlcy5nZXQoIm1vZHVsZUlkIikuZXF1YWxzKG1vZHVsZUlkKSAmJiBpbnB1dFZhbHVlcy5nZXQo
InJvbGVJZCIpLmVxdWFscyhyb2xlSWQpCgkJCQkmJiAhaW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJl
SWQiKS5lcXVhbHMocmVhZEZlYXR1cmVJZCkgJiYgIWlucHV0VmFsdWVzLmdldCgicGVybWlzc2lv
bklkIikuZXF1YWxzKGN1cnJlbnRQZXJtaXNzaW9uSWQpKSB7CgkJCWlzRGVsZXRlID0gZmFsc2U7
CgkJCXJldHVybiBpc0RlbGV0ZTsKCQl9Cgl9CglyZXR1cm4gaXNEZWxldGU7Cn0KCi8vICoqKiog
Q2hlY2tpbmcgUGFyZW50IE1vZHVsZSBhbmQgcmVtb3Zpbmcgc2FtZSBmZWF0dXJlIGFuZCBSZWFk
IEZlYXR1cmUgYXN3ZWxsIChJZiBleGlzdHMpICoqKiogLy8KcHJpdmF0ZSBzdGF0aWMgdm9pZCBj
aGVja0FuZERlbGV0ZVBhcmVudE1vZHVsZXMoSURhdGFbXSBpbnB1dExpc3QsSGFzaE1hcDxTdHJp
bmcsIFN0cmluZz4gY3VycmVudElucHV0VmFsdWVzLAoJCVN0cmluZyBmZWF0dXJlSWQsIFN0cmlu
ZyByZWFkRmVhdHVyZUlkLCBTdHJpbmcgcm9sZUlkLCBBcnJheUxpc3Q8SURhdGE+IGZpbmFsVmFs
dWVzKSB7Cglmb3IoSURhdGEgZWw6IGlucHV0TGlzdCkgewoJCUhhc2hNYXA8U3RyaW5nLCBTdHJp
bmc+IGlucHV0VmFsdWVzID0gZ2V0SW5wdXRWYWx1ZXMoZWwpOwoJCWlmKGlucHV0VmFsdWVzLmdl
dCgibW9kdWxlSWQiKS5lcXVhbHMoY3VycmVudElucHV0VmFsdWVzLmdldCgicGFyZW50SWQiKSkp
IHsKCQkJaWYoaW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJlSWQiKS5lcXVhbHMoZmVhdHVyZUlkKSkg
ewoJCQkJaWYoIWNoZWNrSWZDaGlsZHJlbkhhc1Blcm1pc3Npb24oaW5wdXRWYWx1ZXMuZ2V0KCJt
b2R1bGVJZCIpLCBpbnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpLCByb2xlSWQsIGlucHV0VmFs
dWVzLmdldCgicGVybWlzc2lvbklkIiksIGlucHV0TGlzdCkpewoJCQkJCWFkZFJvbGVQZXJtaXNz
aW9uKGlucHV0VmFsdWVzLmdldCgicGVybWlzc2lvbklkIiksIHJvbGVJZCwgZmluYWxWYWx1ZXMp
OwoJCQkJfSBlbHNlIGlmIChpbnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpLmVxdWFscyhyZWFk
RmVhdHVyZUlkKSkgewoJCQkJCWlmKCFjaGVja0lmQ2hpbGRyZW5IYXNQZXJtaXNzaW9uKGlucHV0
VmFsdWVzLmdldCgibW9kdWxlSWQiKSwgaW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJlSWQiKSwgcm9s
ZUlkLCBpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpLCBpbnB1dExpc3QpKXsKCQkJCQkJ
YWRkUm9sZVBlcm1pc3Npb24oaW5wdXRWYWx1ZXMuZ2V0KCJwZXJtaXNzaW9uSWQiKSwgcm9sZUlk
LCBmaW5hbFZhbHVlcyk7CgkJCQkJfQoJCQkJfQoJCQl9CgkJCWNoZWNrQW5kRGVsZXRlUGFyZW50
TW9kdWxlcyhpbnB1dExpc3QsIGlucHV0VmFsdWVzLCBmZWF0dXJlSWQsIHJlYWRGZWF0dXJlSWQs
IHJvbGVJZCwgZmluYWxWYWx1ZXMpOwoJCX0KCX0KfQoKLy8gKioqKiBDaGVjayBpZiBhdGxlYXN0
IG9uZSBjaGlsZHJlbiBoYXMgYSBnaXZlbiBwZXJtaXNzaW9uLCBzbyB0aGF0IHRoZSBwZXJtaXNz
aW9uIHNob3VsZCBub3QgYmUgZGVsZXRlZCBpbiBwYXJlbnQgKioqKiAvLwpwcml2YXRlIHN0YXRp
YyBCb29sZWFuIGNoZWNrSWZDaGlsZHJlbkhhc1Blcm1pc3Npb24oU3RyaW5nIG1vZHVsZUlkLCBT
dHJpbmcgZmVhdHVyZUlkLCBTdHJpbmcgcm9sZUlkLCBTdHJpbmcgY3VycmVudENoaWxkUGVybWlz
c2lvbklkLCBJRGF0YVtdIGlucHV0TGlzdCApIHsKCUJvb2xlYW4gaGFzUGVybWlzc2lvbiA9IGZh
bHNlOwoJZm9yKElEYXRhIGVsOiBpbnB1dExpc3QpIHsKCQlIYXNoTWFwPFN0cmluZywgU3RyaW5n
PiBpbnB1dFZhbHVlcyA9IGdldElucHV0VmFsdWVzKGVsKTsKCQlpZihpbnB1dFZhbHVlcy5nZXQo
InBhcmVudElkIikuZXF1YWxzKG1vZHVsZUlkKSAmJiBpbnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJ
ZCIpLmVxdWFscyhmZWF0dXJlSWQpICYmIAoJCQkgaW5wdXRWYWx1ZXMuZ2V0KCJyb2xlSWQiKS5l
cXVhbHMocm9sZUlkKSAmJiAhaW5wdXRWYWx1ZXMuZ2V0KCJwZXJtaXNzaW9uSWQiKS5lcXVhbHMo
Y3VycmVudENoaWxkUGVybWlzc2lvbklkKSkgewoJCQloYXNQZXJtaXNzaW9uID0gdHJ1ZTsKCQkJ
cmV0dXJuIGhhc1Blcm1pc3Npb247CgkJfQoJfQoJcmV0dXJuIGhhc1Blcm1pc3Npb247Cn0KCi8v
ICoqKiogQ2hlY2tpbmcgQ2hpbGQgTW9kdWxlIGFuZCByZW1vdmluZyBzYW1lIGZlYXR1cmUgYW5k
IFJlYWQgRmVhdHVyZSBhc3dlbGwgKElmIGV4aXN0cykgKioqKiAvLwpwcml2YXRlIHN0YXRpYyB2
b2lkIGNoZWNrQW5kRGVsZXRlQ2hpbGRNb2R1bGVzKElEYXRhW10gaW5wdXRMaXN0LEhhc2hNYXA8
U3RyaW5nLCBTdHJpbmc+IGN1cnJlbnRJbnB1dFZhbHVlcywKCQlTdHJpbmcgZmVhdHVyZUlkLCBT
dHJpbmcgcmVhZEZlYXR1cmVJZCwgU3RyaW5nIHJvbGVJZCwgQXJyYXlMaXN0PElEYXRhPiBmaW5h
bFZhbHVlcykgewoJZm9yKElEYXRhIGVsOiBpbnB1dExpc3QpIHsKCQlIYXNoTWFwPFN0cmluZywg
U3RyaW5nPiBpbnB1dFZhbHVlcyA9IGdldElucHV0VmFsdWVzKGVsKTsKCQlpZihpbnB1dFZhbHVl
cy5nZXQoInBhcmVudElkIikuZXF1YWxzKGN1cnJlbnRJbnB1dFZhbHVlcy5nZXQoIm1vZHVsZUlk
IikpKSB7CgkJCWlmKCFjdXJyZW50SW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJlSWQiKS5lcXVhbHMo
cmVhZEZlYXR1cmVJZCkpIHsKCQkJCWlmKGNoZWNrSWZSZWFkVG9CZURlbGV0ZWQoaW5wdXRWYWx1
ZXMuZ2V0KCJtb2R1bGVJZCIpLCByZWFkRmVhdHVyZUlkLCBpbnB1dFZhbHVlcy5nZXQoInBlcm1p
c3Npb25JZCIpLCByb2xlSWQsIGlucHV0TGlzdCkpIHsKCQkJCQlhZGRSb2xlUGVybWlzc2lvbihp
bnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpLCByb2xlSWQsIGZpbmFsVmFsdWVzKTsKCQkJ
CX0KCQkJfSBlbHNlIGlmKGlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIikuZXF1YWxzKGZlYXR1
cmVJZCkpIHsKCQkJCWFkZFJvbGVQZXJtaXNzaW9uKGlucHV0VmFsdWVzLmdldCgicGVybWlzc2lv
bklkIiksIHJvbGVJZCwgZmluYWxWYWx1ZXMpOwoJCQl9CgkJCWNoZWNrQW5kRGVsZXRlUGFyZW50
TW9kdWxlcyhpbnB1dExpc3QsIGlucHV0VmFsdWVzLCBmZWF0dXJlSWQsIHJlYWRGZWF0dXJlSWQs
IHJvbGVJZCwgZmluYWxWYWx1ZXMpOwoJCX0KCX0KfQoKLy8gPT09PT09PT0gSW5zZXJ0IFBlcm1p
c3Npb24gSmF2YSBTZXJ2aWNlIChVVElMUykgPT09PT09PT09PSAvLwoKLy8gKioqKiBGZXRjaGlu
ZyBQYXJlbnRzIG9mIHNwZWNpZmljIG1vZHVsZSBhbmQgYWRkaW5nIFJlYWQgZmVhdHVyZSAqKioq
IC8vCnByaXZhdGUgc3RhdGljIHZvaWQgZ2V0UGFyZW50TW9kdWxlcyhJRGF0YVtdIGlucHV0TGlz
dCxIYXNoTWFwPFN0cmluZywgU3RyaW5nPiBjdXJyZW50SW5wdXRWYWx1ZXMsIFN0cmluZyBpbnB1
dFBlcm1pc3Npb25JZCwgCgkJU3RyaW5nIGZlYXR1cmVJZCwgU3RyaW5nIG1vZHVsZUlkLCBTdHJp
bmcgcmVhZEZlYXR1cmVJZCwgU3RyaW5nIHJvbGVJZCwgQXJyYXlMaXN0PElEYXRhPiBmaW5hbFZh
bHVlcykgewoJZm9yKElEYXRhIGVsOiBpbnB1dExpc3QpIHsKCQlIYXNoTWFwPFN0cmluZywgU3Ry
aW5nPiBpbnB1dFZhbHVlcyA9IGdldElucHV0VmFsdWVzKGVsKTsKCQlpZihpbnB1dFZhbHVlcy5n
ZXQoIm1vZHVsZUlkIikuZXF1YWxzKGN1cnJlbnRJbnB1dFZhbHVlcy5nZXQoInBhcmVudElkIikp
KSB7CgkJCWlmKGlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIikuZXF1YWxzKHJlYWRGZWF0dXJl
SWQpKSB7CgkJCQlhZGRSb2xlUGVybWlzc2lvbihpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25J
ZCIpLCByb2xlSWQsIGZpbmFsVmFsdWVzKTsKCQkJfSBlbHNlICBpZihpbnB1dFZhbHVlcy5nZXQo
ImZlYXR1cmVJZCIpLmVxdWFscyhmZWF0dXJlSWQpKSB7CgkJCQlhZGRSb2xlUGVybWlzc2lvbihp
bnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpLCByb2xlSWQsIGZpbmFsVmFsdWVzKTsKCQkJ
fQoJCQlnZXRQYXJlbnRNb2R1bGVzKGlucHV0TGlzdCwgaW5wdXRWYWx1ZXMsIGlucHV0UGVybWlz
c2lvbklkLCBmZWF0dXJlSWQsIG1vZHVsZUlkLCByZWFkRmVhdHVyZUlkLCByb2xlSWQsIGZpbmFs
VmFsdWVzKTsKCQl9Cgl9Cn0KCi8vICoqKiogRmV0Y2hpbmcgQ2hpbGRzIG9mIHNwZWNpZmljIG1v
ZHVsZSBhbmQgYWRkaW5nIFJlYWQgZmVhdHVyZSAmIGN1cnJlbnQgTW9kdWxlIGZlYXR1cmUoSWYg
RXhpc3QpICoqKiogLy8KcHJpdmF0ZSBzdGF0aWMgdm9pZCBnZXRDaGlsZE1vZHVsZXMoSURhdGFb
XSBpbnB1dExpc3QsSGFzaE1hcDxTdHJpbmcsIFN0cmluZz4gY3VycmVudElucHV0VmFsdWVzLCBT
dHJpbmcgaW5wdXRQZXJtaXNzaW9uSWQsIAoJCVN0cmluZyBmZWF0dXJlSWQsIFN0cmluZyBtb2R1
bGVJZCwgU3RyaW5nIHJlYWRGZWF0dXJlSWQsIFN0cmluZyByb2xlSWQsIEFycmF5TGlzdDxJRGF0
YT4gZmluYWxWYWx1ZXMpIHsKCWZvcihJRGF0YSBlbDogaW5wdXRMaXN0KSB7CgkJSGFzaE1hcDxT
dHJpbmcsIFN0cmluZz4gaW5wdXRWYWx1ZXMgPSBnZXRJbnB1dFZhbHVlcyhlbCk7CgkJaWYoaW5w
dXRWYWx1ZXMuZ2V0KCJwYXJlbnRJZCIpLmVxdWFscyhjdXJyZW50SW5wdXRWYWx1ZXMuZ2V0KCJt
b2R1bGVJZCIpKSkgewoJCQlpZihpbnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpLmVxdWFscyhy
ZWFkRmVhdHVyZUlkKSkgewoJCQkJYWRkUm9sZVBlcm1pc3Npb24oaW5wdXRWYWx1ZXMuZ2V0KCJw
ZXJtaXNzaW9uSWQiKSwgcm9sZUlkLCBmaW5hbFZhbHVlcyk7CgkJCX0gZWxzZSBpZiAoaW5wdXRW
YWx1ZXMuZ2V0KCJmZWF0dXJlSWQiKS5lcXVhbHMoZmVhdHVyZUlkKSkgewoJCQkJYWRkUm9sZVBl
cm1pc3Npb24oaW5wdXRWYWx1ZXMuZ2V0KCJwZXJtaXNzaW9uSWQiKSwgcm9sZUlkLCBmaW5hbFZh
bHVlcyk7CgkJCX0KCQkJZ2V0Q2hpbGRNb2R1bGVzKGlucHV0TGlzdCwgaW5wdXRWYWx1ZXMsIGlu
cHV0UGVybWlzc2lvbklkLCBmZWF0dXJlSWQsIG1vZHVsZUlkLCByZWFkRmVhdHVyZUlkLCByb2xl
SWQsIGZpbmFsVmFsdWVzKTsKCQl9Cgl9Cn0KCi8vICoqKiogQWRkaW5nIFBlcm1pc3Npb25JZCBh
bmQgcm9sZUlkIHRvIElEYXRhICoqKiogLy8KcHJpdmF0ZSBzdGF0aWMgdm9pZCBhZGRSb2xlUGVy
bWlzc2lvbihTdHJpbmcgcGVybWlzc2lvbklkLCBTdHJpbmcgcm9sZUlkLCBBcnJheUxpc3Q8SURh
dGE+IGZpbmFsVmFsdWVzKSB7CglJRGF0YSBwZXJtaXNzaW9uID0gSURhdGFGYWN0b3J5LmNyZWF0
ZSgpOwoJSURhdGFDdXJzb3IgcGVybWlzc2lvbkN1cnNvciA9IHBlcm1pc3Npb24uZ2V0Q3Vyc29y
KCk7CglJRGF0YVV0aWwucHV0KHBlcm1pc3Npb25DdXJzb3IsICJwZXJtaXNzaW9uSWQiLCBwZXJt
aXNzaW9uSWQpOwoJSURhdGFVdGlsLnB1dChwZXJtaXNzaW9uQ3Vyc29yLCAicm9sZUlkIiwgcm9s
ZUlkKTsKCXBlcm1pc3Npb25DdXJzb3IuZGVzdHJveSgpOwoJZmluYWxWYWx1ZXMuYWRkKHBlcm1p
c3Npb24pOwp9Cgpwcml2YXRlIHN0YXRpYyBTdHJpbmcgZ2V0UGVybWlzc2lvbklkQnlNb2R1bGVB
bmRGZWF0dXJlKFN0cmluZyBtb2R1bGVJZCwgU3RyaW5nIGZlYXR1cmVJZCwgSURhdGFbXSBpbnB1
dExpc3QpIHsKCVN0cmluZyBwZXJtaXNzaW9uSWQgPSBudWxsOwoJZm9yKElEYXRhIGVsIDogaW5w
dXRMaXN0KSB7CgkJSGFzaE1hcDxTdHJpbmcsIFN0cmluZz4gaW5wdXRWYWx1ZXMgPSBnZXRJbnB1
dFZhbHVlcyhlbCk7CgkJaWYoaW5wdXRWYWx1ZXMuZ2V0KCJtb2R1bGVJZCIpLmVxdWFscyhtb2R1
bGVJZCkgJiYgaW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJlSWQiKS5lcXVhbHMoZmVhdHVyZUlkKSkg
ewoJCQlwZXJtaXNzaW9uSWQgPSBpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpOwoJCX0K
CX0KCXJldHVybiBwZXJtaXNzaW9uSWQ7Cn0KCi8vID09PT09PT09IFByZXBhcmUgTWVudSBKYXZh
IFNlcnZpY2UgKFVUSUxTKSA9PT09PT09PT09IC8vCgpwcml2YXRlIHN0YXRpYyB2b2lkIGdldENo
aWxkTW9kdWxlKElEYXRhIGN1cnJlbnRNb2R1bGUsIElEYXRhW10gaW5wdXRMaXN0KSB7CglJRGF0
YUN1cnNvciBjdXJyZW50TW9kdWxlQ3Vyc29yID0gY3VycmVudE1vZHVsZS5nZXRDdXJzb3IoKTsK
CUFycmF5TGlzdDxJRGF0YT4gc3ViTW9kdWxlcyA9IG5ldyBBcnJheUxpc3Q8PigpOwoJZm9yKElE
YXRhIGVsOiBpbnB1dExpc3QpIHsKCQlIYXNoTWFwPFN0cmluZywgU3RyaW5nPiBpbnB1dFZhbHVl
cyA9IGdldElucHV0VmFsdWVzKGVsKTsKCQlTdHJpbmcgY3VycmVudE1vZHVsZUlkID0gSURhdGFV
dGlsLmdldFN0cmluZyhjdXJyZW50TW9kdWxlQ3Vyc29yLCAiaWQiKTsKCQlpZihpbnB1dFZhbHVl
cy5nZXQoInBhcmVudElkIikuZXF1YWxzKGN1cnJlbnRNb2R1bGVJZCkpIHsKCQkJaWYoIWNoZWNr
SXNFeGlzdChpbnB1dFZhbHVlcy5nZXQoIm1vZHVsZUlkIiksIHN1Yk1vZHVsZXMpKSB7CgkJCQlJ
RGF0YSBtb2R1bGVJRGF0YSA9IGFkZE1vZHVsZShpbnB1dFZhbHVlcyk7CgkJCQlzdWJNb2R1bGVz
LmFkZChtb2R1bGVJRGF0YSk7CgkJCQlnZXRDaGlsZE1vZHVsZShtb2R1bGVJRGF0YSwgaW5wdXRM
aXN0KTsKCQkJCWFkZEZlYXR1cmVzVG9Nb2R1bGUoaW5wdXRMaXN0LCBtb2R1bGVJRGF0YSk7CgkJ
CQlpZihpbnB1dFZhbHVlcy5nZXQoImlzUHJvZmlsZUluZm9ybWF0aW9uIikgIT0gbnVsbCAmJiBp
bnB1dFZhbHVlcy5nZXQoImlzUHJvZmlsZUluZm9ybWF0aW9uIikuZXF1YWxzKCJ0cnVlIikpIHsK
CQkJCQljaGVja0FuZERlbGV0ZU1vZHVsZShzdWJNb2R1bGVzLCBtb2R1bGVJRGF0YSk7CgkJCQl9
CgkJCX0KCQl9IAoJfQoJSURhdGFVdGlsLnB1dChjdXJyZW50TW9kdWxlQ3Vyc29yLCAic3ViTW9k
dWxlcyIsIGNvbnZlcnRUb0lEYXRhQXJyYXkoc3ViTW9kdWxlcykpOwoJY3VycmVudE1vZHVsZUN1
cnNvci5kZXN0cm95KCk7Cn0KCQoJLy8gKioqKiAoVVRJTCkgQWRkaW5nIEZlYXR1cmVzIHRvIG1v
ZHVsZSAqKioqIC8vCglwcml2YXRlIHN0YXRpYyB2b2lkIGFkZEZlYXR1cmVzVG9Nb2R1bGUoSURh
dGFbXSBpbnB1dExpc3QsIElEYXRhIG1vZHVsZSkgewoJCUlEYXRhQ3Vyc29yIG1vZHVsZUN1cnNv
ciA9IG1vZHVsZS5nZXRDdXJzb3IoKTsKCQlBcnJheUxpc3Q8SURhdGE+IGZlYXR1cmVzID0gbmV3
IEFycmF5TGlzdDw+KCk7CgkJZm9yKElEYXRhIGVsOiBpbnB1dExpc3QpIHsKCQkJSGFzaE1hcDxT
dHJpbmcsIFN0cmluZz4gaW5wdXRWYWx1ZXMgPSBnZXRJbnB1dFZhbHVlcyhlbCk7CgkJCVN0cmlu
ZyBtb2R1bGVJZCA9IElEYXRhVXRpbC5nZXRTdHJpbmcobW9kdWxlQ3Vyc29yLCAiaWQiKTsKCQkJ
aWYoaW5wdXRWYWx1ZXMuZ2V0KCJtb2R1bGVJZCIpLmVxdWFscyhtb2R1bGVJZCkpIHsKCQkJCS8v
ICoqKiBBZGRpbmcgRmVhdHVyZXMgZm9yIGlucHV0IFVzZXIgcm9sZXMgKEZvciBQZXJtaXNzaW9u
KSAqKiogLy8KCQkJCWlmKChpbnB1dFZhbHVlcy5nZXQoIm9ubHlDaGVja2VkIikgIT0gbnVsbCkg
JiYgaW5wdXRWYWx1ZXMuZ2V0KCJvbmx5Q2hlY2tlZCIpLmVxdWFscygidHJ1ZSIpKSB7CgkJCQkJ
Qm9vbGVhbiBpc1JvbGVNYXRjaGVkID0gY2hlY2tGZWF0dXJlRm9ySW5wdXRSb2xlKGlucHV0VmFs
dWVzLmdldCgiaW5wdXRSb2xlcyIpLCBpbnB1dFZhbHVlcy5nZXQoIm1vZHVsZUlkIiksIGlucHV0
VmFsdWVzLmdldCgiZmVhdHVyZUlkIiksIGlucHV0TGlzdCk7CgkJCQkJaWYoaXNSb2xlTWF0Y2hl
ZCkgZmVhdHVyZXMuYWRkKGFkZEZlYXR1cmUoaW5wdXRWYWx1ZXMsIG51bGwpKTsKCQkJCX0KCQkJ
CS8vICoqKiBBZGRpbmcgRmVhdHVyZXMgZm9yIHRoZSBtb2R1bGUgKioqIC8vCgkJCQllbHNlIGlm
KCFjaGVja0lzRXhpc3QoaW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJlSWQiKSwgZmVhdHVyZXMpKSB7
CgkJCQkJaWYoaW5wdXRWYWx1ZXMuZ2V0KCJpbnB1dFJvbGVzIikgIT0gbnVsbCkgewoJCQkJCQlC
b29sZWFuIGlzUm9sZU1hdGNoZWQgPSBjaGVja0ZlYXR1cmVGb3JJbnB1dFJvbGUoaW5wdXRWYWx1
ZXMuZ2V0KCJpbnB1dFJvbGVzIiksIGlucHV0VmFsdWVzLmdldCgibW9kdWxlSWQiKSwgaW5wdXRW
YWx1ZXMuZ2V0KCJmZWF0dXJlSWQiKSwgaW5wdXRMaXN0KTsKCQkJCQkJaWYoaXNSb2xlTWF0Y2hl
ZCkgZmVhdHVyZXMuYWRkKGFkZEZlYXR1cmUoaW5wdXRWYWx1ZXMsICJ0cnVlIikpOwoJCQkJCQll
bHNlIGZlYXR1cmVzLmFkZChhZGRGZWF0dXJlKGlucHV0VmFsdWVzLCAiZmFsc2UiKSk7CgkJCQkJ
fSBlbHNlIHsKCQkJCQkJZmVhdHVyZXMuYWRkKGFkZEZlYXR1cmUoaW5wdXRWYWx1ZXMsIG51bGwp
KTsKCQkJCQl9CgkJCQl9CgkJCX0gCgkJfQoJCUlEYXRhVXRpbC5wdXQobW9kdWxlQ3Vyc29yLCAi
ZmVhdHVyZXMiLCBjb252ZXJ0VG9JRGF0YUFycmF5KGZlYXR1cmVzKSk7CgkJbW9kdWxlQ3Vyc29y
LmRlc3Ryb3koKTsKCX0KCQoJLy8gKioqKiAoVVRJTCkgQ29udmVydGluZyBpbnB1dCB2YWx1ZXMg
ZnJvbSBJRGF0YSB0byBNYXAgKioqKiAvLwoJcHJpdmF0ZSBzdGF0aWMgSGFzaE1hcDxTdHJpbmcs
IFN0cmluZz4gZ2V0SW5wdXRWYWx1ZXMoSURhdGEgaW5wdXQpIHsKCQlIYXNoTWFwPFN0cmluZywg
U3RyaW5nPiBpbnB1dFZhbHVlID0gbmV3IEhhc2hNYXA8PigpOwoJCUlEYXRhQ3Vyc29yIGVsZW1l
bnRDdXJzb3IgPSBpbnB1dC5nZXRDdXJzb3IoKTsgCgkJaW5wdXRWYWx1ZS5wdXQoIm1vZHVsZUlk
IiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVtZW50Q3Vyc29yLCAiTU9EVUxFX0lEIikpOwoJCWlu
cHV0VmFsdWUucHV0KCJtb2R1bGVOYW1lIiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVtZW50Q3Vy
c29yLCAiTU9EVUxFX05BTUUiKSk7CgkJaW5wdXRWYWx1ZS5wdXQoImlzU2VjdGlvbiIsIElEYXRh
VXRpbC5nZXRTdHJpbmcoZWxlbWVudEN1cnNvciwgIklTX1NFQ1RJT04iKSk7CgkJaW5wdXRWYWx1
ZS5wdXQoInJvdXRlVXJsIiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVtZW50Q3Vyc29yLCAiUk9V
VEVfVVJMIikpOwoJCWlucHV0VmFsdWUucHV0KCJzdmciLCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGVs
ZW1lbnRDdXJzb3IsICJTVkciKSk7CgkJaW5wdXRWYWx1ZS5wdXQoImljb24iLCBJRGF0YVV0aWwu
Z2V0U3RyaW5nKGVsZW1lbnRDdXJzb3IsICJJQ09OIikpOwoJCWlucHV0VmFsdWUucHV0KCJtb2R1
bGVPcmRlciIsIElEYXRhVXRpbC5nZXRTdHJpbmcoZWxlbWVudEN1cnNvciwgIk1PRFVMRV9PUkRF
UiIpKTsKCQlpbnB1dFZhbHVlLnB1dCgicGFyZW50SWQiLCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGVs
ZW1lbnRDdXJzb3IsICJQQVJFTlRfSUQiKSk7CgkJaW5wdXRWYWx1ZS5wdXQoIm1vZHVsZU9yZGVy
IiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVtZW50Q3Vyc29yLCAiTU9EVUxFX09SREVSIikpOwoJ
CWlucHV0VmFsdWUucHV0KCJwZXJtaXNzaW9uSWQiLCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1l
bnRDdXJzb3IsICJQRVJNSVNTSU9OX0lEIikpOwoJCWlucHV0VmFsdWUucHV0KCJmZWF0dXJlTmFt
ZSIsIElEYXRhVXRpbC5nZXRTdHJpbmcoZWxlbWVudEN1cnNvciwgIkZFQVRVUkVfTkFNRSIpKTsK
CQlpbnB1dFZhbHVlLnB1dCgiZmVhdHVyZUlkIiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVtZW50
Q3Vyc29yLCAiRkVBVFVSRV9JRCIpKTsKCQlpbnB1dFZhbHVlLnB1dCgiZmVhdHVyZVR5cGUiLCBJ
RGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1lbnRDdXJzb3IsICJGRUFUVVJFX1RZUEUiKSk7CgkJaW5w
dXRWYWx1ZS5wdXQoInJvbGVQZXJtaXNzaW9uSWQiLCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1l
bnRDdXJzb3IsICJST0xFX1BFUk1JU1NJT05fSUQiKSk7CgkJaW5wdXRWYWx1ZS5wdXQoIm9ubHlD
aGVja2VkIiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVtZW50Q3Vyc29yLCAiT05MWV9DSEVDS0VE
IikpOwoJCWlucHV0VmFsdWUucHV0KCJpbnB1dFJvbGVzIiwgSURhdGFVdGlsLmdldFN0cmluZyhl
bGVtZW50Q3Vyc29yLCAiSU5QVVRfUk9MRVMiKSk7CgkJaW5wdXRWYWx1ZS5wdXQoInJvbGVJZCIs
IElEYXRhVXRpbC5nZXRTdHJpbmcoZWxlbWVudEN1cnNvciwgIlJPTEVfSUQiKSk7CgkJaW5wdXRW
YWx1ZS5wdXQoImlzUHJvZmlsZUluZm9ybWF0aW9uIiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVt
ZW50Q3Vyc29yLCAiaXNQcm9maWxlSW5mb3JtYXRpb24iKSk7CgkJcmV0dXJuIGlucHV0VmFsdWU7
Cgl9CgkKCS8vICoqKiogKFVUSUwpIEFkZGluZyBNb2R1bGUgaW50byBJRGF0YSAqKioqIC8vCglw
cml2YXRlIHN0YXRpYyBJRGF0YSBhZGRNb2R1bGUoSGFzaE1hcDxTdHJpbmcsIFN0cmluZz4gaW5w
dXRWYWx1ZXMpIHsKCQlJRGF0YSBtb2R1bGVJRGF0YSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsK
CQlJRGF0YUN1cnNvciBtb2R1bGVDdXJzb3IgPSBtb2R1bGVJRGF0YS5nZXRDdXJzb3IoKTsKCQlJ
RGF0YVV0aWwucHV0KG1vZHVsZUN1cnNvciwgImlkIiwgaW5wdXRWYWx1ZXMuZ2V0KCJtb2R1bGVJ
ZCIpKTsKCQlJRGF0YVV0aWwucHV0KG1vZHVsZUN1cnNvciwgIm5hbWUiLCBpbnB1dFZhbHVlcy5n
ZXQoIm1vZHVsZU5hbWUiKSk7CgkJSURhdGFVdGlsLnB1dChtb2R1bGVDdXJzb3IsICJwYXJlbnRJ
ZCIsIGlucHV0VmFsdWVzLmdldCgicGFyZW50SWQiKSk7CgkJSURhdGFVdGlsLnB1dChtb2R1bGVD
dXJzb3IsICJpc1NlY3Rpb24iLCBpbnB1dFZhbHVlcy5nZXQoImlzU2VjdGlvbiIpKTsKCQlJRGF0
YVV0aWwucHV0KG1vZHVsZUN1cnNvciwgInJvdXRlVXJsIiwgaW5wdXRWYWx1ZXMuZ2V0KCJyb3V0
ZVVybCIpKTsKCQlJRGF0YVV0aWwucHV0KG1vZHVsZUN1cnNvciwgInN2ZyIsIGlucHV0VmFsdWVz
LmdldCgic3ZnIikpOwoJCUlEYXRhVXRpbC5wdXQobW9kdWxlQ3Vyc29yLCAiaWNvbiIsIGlucHV0
VmFsdWVzLmdldCgiaWNvbiIpKTsKCQlJRGF0YVV0aWwucHV0KG1vZHVsZUN1cnNvciwgIm9yZGVy
IiwgaW5wdXRWYWx1ZXMuZ2V0KCJtb2R1bGVPcmRlciIpKTsKCQltb2R1bGVDdXJzb3IuZGVzdHJv
eSgpOwoJCXJldHVybiBtb2R1bGVJRGF0YTsKCX0KCQoJLy8gKioqKiAoVVRJTCkgQWRkaW5nIEZl
YXR1cmUgaW50byBJRGF0YSAqKioqIC8vCglwcml2YXRlIHN0YXRpYyBJRGF0YSBhZGRGZWF0dXJl
KEhhc2hNYXA8U3RyaW5nLCBTdHJpbmc+IGlucHV0VmFsdWVzLCBTdHJpbmcgaXNFbmFibGVkKSB7
CgkJSURhdGEgZmVhdHVyZUlEYXRhID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOwoJCUlEYXRhQ3Vy
c29yIGZlYXR1cmVDdXJzb3IgPSBmZWF0dXJlSURhdGEuZ2V0Q3Vyc29yKCk7CgkJSURhdGFVdGls
LnB1dChmZWF0dXJlQ3Vyc29yLCAiaWQiLCBpbnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpKTsK
CQlJRGF0YVV0aWwucHV0KGZlYXR1cmVDdXJzb3IsICJuYW1lIiwgaW5wdXRWYWx1ZXMuZ2V0KCJm
ZWF0dXJlTmFtZSIpKTsKCQlJRGF0YVV0aWwucHV0KGZlYXR1cmVDdXJzb3IsICJ0eXBlIiwgaW5w
dXRWYWx1ZXMuZ2V0KCJmZWF0dXJlVHlwZSIpKTsKCQlJRGF0YVV0aWwucHV0KGZlYXR1cmVDdXJz
b3IsICJwZXJtaXNzaW9uSWQiLCBpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpKTsKCQlp
Zihpc0VuYWJsZWQgIT0gbnVsbCkgewoJCQlJRGF0YVV0aWwucHV0KGZlYXR1cmVDdXJzb3IsICJp
c0VuYWJsZWQiLCBpc0VuYWJsZWQpOwoJCX0KCQlmZWF0dXJlQ3Vyc29yLmRlc3Ryb3koKTsKCQly
ZXR1cm4gZmVhdHVyZUlEYXRhOwoJfQoJCgkvLyAqKioqIChVVElMKSBDb252ZXJ0aW5nIEFycmF5
TGlzdCB0byBJRGF0YSBbXSAqKioqIC8vCglwcml2YXRlIHN0YXRpYyBJRGF0YVtdIGNvbnZlcnRU
b0lEYXRhQXJyYXkoQXJyYXlMaXN0PElEYXRhPiBsaXN0KSB7CgkJSURhdGFbXSBvdXRwdXQgPSBu
ZXcgSURhdGFbbGlzdC5zaXplKCldOwoJCWZvciAoaW50IGkgPSAwOyBpIDwgbGlzdC5zaXplKCk7
IGkrKykKCQkJb3V0cHV0W2ldID0gSURhdGFVdGlsLmNsb25lKGxpc3QuZ2V0KGkpKTsKCQlyZXR1
cm4gb3V0cHV0OwoJfQoJCgkvLyAqKioqIChVVElMKSBDaGVja2luZyB0aGUgZHVwbGljYXRpb24g
b2Ygb2JqZWN0IGluIGEgZ2l2ZW4gbGlzdCAqKioqIC8vCglwcml2YXRlIHN0YXRpYyBCb29sZWFu
IGNoZWNrSXNFeGlzdChTdHJpbmcgaWQsIEFycmF5TGlzdDxJRGF0YT4gbGlzdCkgewoJCUxpc3Q8
SURhdGE+IHJlc3VsdCA9IGxpc3Quc3RyZWFtKCkuZmlsdGVyKGR1cCAtPiBJRGF0YVV0aWwuZ2V0
U3RyaW5nKGR1cC5nZXRDdXJzb3IoKSwgImlkIikuZXF1YWxzKGlkKSkuY29sbGVjdChDb2xsZWN0
b3JzLnRvTGlzdCgpKTsKCQlpZihyZXN1bHQuaXNFbXB0eSgpKSB7CgkJCXJldHVybiBmYWxzZTsK
CQl9CgkJcmV0dXJuIHRydWU7Cgl9CgkKCXByaXZhdGUgc3RhdGljIEJvb2xlYW4gY2hlY2tGZWF0
dXJlRm9ySW5wdXRSb2xlKFN0cmluZyBpbnB1dFJvbGVzLCBTdHJpbmcgbW9kdWxlSWQsIFN0cmlu
ZyBmZWF0dXJlSWQsIElEYXRhW10gaW5wdXRMaXN0KSB7CgkJU3RyaW5nW10gcm9sZXNMaXN0ID0g
aW5wdXRSb2xlcy5zcGxpdCgiLCIpOwoJCUJvb2xlYW4gaXNGb3VuZCA9IGZhbHNlOwoJCWZvcihT
dHJpbmcgcm9sZSA6IHJvbGVzTGlzdCkgewoJCQlmb3IoSURhdGEgZWwgOiBpbnB1dExpc3QpIHsK
CQkJCUhhc2hNYXA8U3RyaW5nLCBTdHJpbmc+IGlucHV0VmFsdWVzID0gZ2V0SW5wdXRWYWx1ZXMo
ZWwpOwoJCQkJaWYoaW5wdXRWYWx1ZXMuZ2V0KCJyb2xlSWQiKSAhPSBudWxsICYmIGlucHV0VmFs
dWVzLmdldCgibW9kdWxlSWQiKSAhPSBudWxsICYmIAoJCQkJCQlpbnB1dFZhbHVlcy5nZXQoImZl
YXR1cmVJZCIpICE9IG51bGwgJiYgaW5wdXRWYWx1ZXMuZ2V0KCJyb2xlSWQiKS5lcXVhbHMocm9s
ZSkgJiYgCgkJCQkJCWlucHV0VmFsdWVzLmdldCgibW9kdWxlSWQiKS5lcXVhbHMobW9kdWxlSWQp
ICYmIGlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIikuZXF1YWxzKGZlYXR1cmVJZCkpIHsKCQkJ
CQlpc0ZvdW5kID0gdHJ1ZTsKCQkJCQlyZXR1cm4gaXNGb3VuZDsKCQkJCX0KCQkJfQoJCX0KCQly
ZXR1cm4gaXNGb3VuZDsKCX0KCQoJcHJpdmF0ZSBzdGF0aWMgdm9pZCBjaGVja0FuZERlbGV0ZU1v
ZHVsZShBcnJheUxpc3Q8SURhdGE+IGxpc3QsIElEYXRhIG9iaikgewoJCUlEYXRhQ3Vyc29yIGVs
ZW1lbnRDdXJzb3IgPSBvYmouZ2V0Q3Vyc29yKCk7IAoJCUlEYXRhW10gZmVhdHVyZXMgPSBJRGF0
YVV0aWwuZ2V0SURhdGFBcnJheShlbGVtZW50Q3Vyc29yLCAiZmVhdHVyZXMiKTsKCQlpZihmZWF0
dXJlcy5sZW5ndGggPT0gMCkgewoJCQlsaXN0LnJlbW92ZShvYmopOwoJCX0KCX0=</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>java.util.ArrayList</value>
    <value>java.util.HashMap</value>
    <value>java.util.List</value>
    <value>java.util.Map</value>
    <value>java.util.Map.Entry</value>
    <value>java.util.stream.Collectors</value>
  </array>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
</Values>
